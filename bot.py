import logging
import requests
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor

# Your Telegram Bot Token
API_TOKEN = '7249249749:AAGJknvtqYjjt4KzGRKngmq6VZeDNjJospI'
POSTBACK_API_URL = "https://postback-server-boba.onrender.com/data"

# Admin IDs
ADMIN_IDS = [5521147132, 6942578867]
TELEGRAM_CHANNEL_ID = "-1002214579126"  # Your channel ID
CHANNEL_INVITE_LINK = "https://t.me/+iG3Cm4JJoZpjY2U0"  # Channel invite link

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# Logging
logging.basicConfig(level=logging.INFO)

# State for user input and list of users
users = {}
user_list = set()  # List of users

# User language preferences
user_language = {}


# Function to check channel subscription
async def check_subscription(user_id):
    try:
        status = await bot.get_chat_member(TELEGRAM_CHANNEL_ID, user_id)
        if status.status in ['creator', 'administrator', 'member']:
            return True
        return False
    except Exception as e:
        logging.error(f"Error checking subscription: {e}")
        return False


# Function to send a delayed message
async def send_message(chat_id, text, markup=None, parse_mode='Markdown'):
    await asyncio.sleep(0.9)
    await bot.send_message(chat_id, text, reply_markup=markup, parse_mode=parse_mode)


# Start command with language selection
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    language_markup = InlineKeyboardMarkup()
    language_markup.add(
        InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data='lang_ru'),
        InlineKeyboardButton("English", callback_data='lang_en')
    )
    await message.answer("üåç Select your language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=language_markup)


# Process language selection
@dp.callback_query_handler(lambda c: c.data in ['lang_ru', 'lang_en'])
async def select_language(callback_query: types.CallbackQuery):
    if callback_query.data == 'lang_ru':
        user_language[callback_query.from_user.id] = 'ru'
        await send_greeting(callback_query.from_user.id, 'ru')
    elif callback_query.data == 'lang_en':
        user_language[callback_query.from_user.id] = 'en'
        await send_greeting(callback_query.from_user.id, 'en')


# Send greeting message with "Join Testing" button
async def send_greeting(user_id, language):
    user_list.add(user_id)
    join_button = InlineKeyboardMarkup().add(
        InlineKeyboardButton(
            "üöÄ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é" if language == 'ru' else "üöÄ Join Testing",
            callback_data='join'
        )
    )
    if language == 'ru':
        with open("static/redsoftpage.png", 'rb') as photo:
            await bot.send_photo(
                user_id,
                photo=photo,
                caption=(
                    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
                    "–ú—ã ‚Äî –∫–æ–º–∞–Ω–¥–∞ **RED SOFT** üöÄ, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–∞–¥–∞—á.\n\n"
                    "üìä –í–µ—Å—å 2023 –≥–æ–¥ –º—ã –∞–∫—Ç–∏–≤–Ω–æ –∏–≥—Ä–∞–ª–∏ –≤ —Ç–∞–∫–∏–µ –∏–≥—Ä—ã, –∫–∞–∫ **MINES** –∏ **Lucky Jet** –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ 1win, —Å–æ–±–∏—Ä–∞—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞, —Å–ø–æ—Å–æ–±–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é.\n\n"
                    "üí° –£ –Ω–∞—Å –ø–æ–ª—É—á–∏–ª–æ—Å—å, –∏ —Ç–µ–ø–µ—Ä—å –º—ã –ø–ª–∞–Ω–∏—Ä—É–µ–º –≤—ã–ø—É—Å—Ç–∏—Ç—å –Ω–∞—à—É –ø—Ä–æ–≥—Ä–∞–º–º—É –≤ –ø—Ä–æ–¥–∞–∂—É —Å —Å–µ—Ä–µ–¥–∏–Ω—ã **2025 –≥–æ–¥–∞** –∑–∞ –≤–Ω—É—à–∏—Ç–µ–ª—å–Ω—É—é —Å—É–º–º—É.\n\n"
                    "–ù–æ —Å–µ–π—á–∞—Å —É –≤–∞—Å –µ—Å—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é **–æ—Ç–∫—Ä—ã—Ç–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è** –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ! üéâ"
                ),
                parse_mode='Markdown',
                reply_markup=join_button
            )
    elif language == 'en':
        with open("static/redsoftpage.png", 'rb') as photo:
            await bot.send_photo(
                user_id,
                photo=photo,
                caption=(
                    "üëã Welcome!\n\n"
                    "We are the **RED SOFT** team üöÄ, specializing in the development of computational algorithms for various tasks.\n\n"
                    "üìä Throughout 2023, we actively played games like **MINES** and **Lucky Jet** on the 1win platform, collecting data to develop an algorithm capable of recognizing patterns and predicting future outcomes with maximum accuracy.\n\n"
                    "üí° We succeeded, and now we plan to launch our program for sale starting mid-**2025** at a significant price.\n\n"
                    "But right now, you have a unique opportunity to be part of the **open testing** phase and get free access to the program! üéâ"
                ),
                parse_mode='Markdown',
                reply_markup=join_button
            )


# Handle "Join Testing" button click
@dp.callback_query_handler(lambda c: c.data == 'join')
async def process_join(callback_query: types.CallbackQuery):
    language = user_language.get(callback_query.from_user.id, 'ru')
    registration_button = InlineKeyboardMarkup().add(
        InlineKeyboardButton(
            "üîó –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ 1win" if language == 'ru' else "üîó Register on 1win",
            url="https://1wcneg.com/casino/list?open=register&p=24h6" if language == 'ru' else "https://1wpgjk.com/casino/list?open=register&p=yteo"
        ),
        InlineKeyboardButton(
            "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é" if language == 'ru' else "‚úÖ Verify registration",
            callback_data='check_registration'
        )
    )
    image_path = "static/instruction.png" if language == 'ru' else "static/instruction_en.png"
    with open(image_path, 'rb') as photo:
        await bot.send_photo(
            callback_query.message.chat.id,
            photo=photo,
            caption=(
                "üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —É—á–∞—Å—Ç–∏–µ!\n\n"
                "–î–ª—è —Ä–∞–±–æ—Ç—ã –≤–∞–º –Ω—É–∂–µ–Ω –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ *1win*.\n\n"
                "‚ö†Ô∏è *–í–∞–∂–Ω–æ*: –ß—Ç–æ –±—ã –ø—Ä–æ–≥—Ä–∞–º–º–∞ –º–æ–≥–ª–∞ –æ—Ç—Å–ª–µ–¥–∏—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç, –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ –Ω–∞—à–µ–º—É —Å–µ–∫—Ä–µ—Ç–Ω–æ–º—É –ø—Ä–æ–º–æ–∫–æ–¥—É *GPT24*."
            ) if language == 'ru' else (
                "üéâ Thank you for joining!\n\n"
                "To use the app, you need an account on *1win*.\n\n"
                "‚ö†Ô∏è *Important*: Your account must be registered with our secret promo code *GPT24* so the app can track it."
            ),
            parse_mode='Markdown',
            reply_markup=registration_button
        )


# Handle "Verify Registration" button click
@dp.callback_query_handler(lambda c: c.data == 'check_registration')
async def check_registration(callback_query: types.CallbackQuery):
    language = user_language.get(callback_query.from_user.id, 'ru')
    with open("static/id.png", 'rb') as photo:
        await bot.send_photo(
            callback_query.message.chat.id,
            photo=photo,
            caption=(
                "üîç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ **ID –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ 1win** –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n\n"
                "üìå ID –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –≤–∞—à–µ–º –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –Ω–∞ —Å–∞–π—Ç–µ 1win."
            ) if language == 'ru' else (
                "üîç Please enter your **1win account ID** to verify registration.\n\n"
                "üìå You can find the ID in your personal account on the 1win website."
            ),
            parse_mode='Markdown'
        )
    users[callback_query.message.chat.id] = 'awaiting_id'


# Handle user ID input
@dp.message_handler(lambda message: users.get(message.chat.id) == 'awaiting_id')
async def process_user_id(message: types.Message):
    user_id = message.text.strip()
    chat_id = message.chat.id

    try:
        response = requests.get(POSTBACK_API_URL)
        response.raise_for_status()
        data = response.json()

        if any(user.get("user_id") == user_id for user in data):
            language = user_language.get(chat_id, 'ru')
            app_url = "https://t.me/redsofts_bot/soft" if language == 'ru' else "https://t.me/redsofts_bot/softeng"
            await send_message(
                chat_id,
                "‚úÖ **–ê–∫–∫–∞—É–Ω—Ç –Ω–∞–π–¥–µ–Ω!** üéâ\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ —Å –Ω–∞—à–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º. üöÄ\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã."
                if language == 'ru' else
                "‚úÖ **Account found!** üéâ\n\n"
                "You can now start using our app. üöÄ\n\n"
                "Click the button below to launch the app.",
                markup=InlineKeyboardMarkup().add(InlineKeyboardButton("üì± –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" if language == 'ru' else "üì± Launch App", url=app_url))
            )
            users.pop(chat_id, None)
        else:
            await send_message(chat_id, "‚ùå ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É GPT24." if user_language.get(chat_id, 'ru') == 'ru' else "‚ùå ID not found. Make sure you registered with the promo code GPT24.")
    except requests.exceptions.RequestException:
        await send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." if user_language.get(chat_id, 'ru') == 'ru' else "An error occurred while verifying the ID. Please try again later.")


# Launch bot
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
