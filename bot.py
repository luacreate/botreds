import logging
import requests
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram-–±–æ—Ç–∞
API_TOKEN = '7249249749:AAGJknvtqYjjt4KzGRKngmq6VZeDNjJospI'
POSTBACK_API_URL = "https://postback-server-boba.onrender.com/data"

# –ê–¥–º–∏–Ω ID
ADMIN_IDS = [5521147132, 6942578867]
TELEGRAM_CHANNEL_ID = "-1002214579126"
CHANNEL_INVITE_LINK = "https://t.me/+iG3Cm4JJoZpjY2U0"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤–≤–æ–¥–∞ ID –∏ —Ä–∞—Å—Å—ã–ª–∫–∏
users = {}
user_list = set()
user_languages = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
MESSAGES = {
    'ru': {
        'welcome': "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–ú—ã ‚Äî –∫–æ–º–∞–Ω–¥–∞ **RED SOFT** üöÄ...",
        'instruction': "static/instruction.png",
        'registration_link': "https://1wqydy.top/casino/list?open=register&p=24h6",
        'app_link': "https://t.me/redsofts_bot/soft",
    },
    'en': {
        'welcome': "üëã Welcome!\n\nWe are the **RED SOFT** team üöÄ...",
        'instruction': "static/instruction_en.png",
        'registration_link': "https://1wbapm.life/casino/list?open=register&p=yteo",
        'app_link': "https://t.me/redsofts_bot/softeng",
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
async def send_message(chat_id, text, markup=None, parse_mode='Markdown'):
    await asyncio.sleep(0.9)
    await bot.send_message(chat_id, text, reply_markup=markup, parse_mode=parse_mode)

# –í—ã–±–æ—Ä —è–∑—ã–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
@dp.message_handler(commands=['start'])
async def select_language(message: types.Message):
    language_buttons = InlineKeyboardMarkup().add(
        InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data='set_language_ru'),
        InlineKeyboardButton("English", callback_data='set_language_en')
    )
    await message.answer("Select Language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=language_buttons)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞
@dp.callback_query_handler(lambda c: c.data.startswith('set_language'))
async def set_language(callback_query: types.CallbackQuery):
    language = callback_query.data.split('_')[-1]
    user_languages[callback_query.from_user.id] = language
    await callback_query.message.delete()
    await start_command(callback_query.message, language)

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
async def start_command(message: types.Message, language=None):
    language = language or user_languages.get(message.chat.id, 'en')
    user_list.add(message.chat.id)
    join_button = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üöÄ Join Testing" if language == 'en' else "üöÄ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data='join')
    )
    with open(MESSAGES[language]['instruction'], 'rb') as photo:
        await bot.send_photo(
            message.chat.id,
            photo=photo,
            caption=MESSAGES[language]['welcome'],
            parse_mode='Markdown',
            reply_markup=join_button
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é"
@dp.callback_query_handler(lambda c: c.data == 'join')
async def process_join(callback_query: types.CallbackQuery):
    language = user_languages.get(callback_query.from_user.id, 'en')
    registration_button = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üîó Register on 1win" if language == 'en' else "üîó –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ 1win", url=MESSAGES[language]['registration_link']),
        InlineKeyboardButton("‚úÖ Check Registration" if language == 'en' else "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data='check_registration')
    )
    with open(MESSAGES[language]['instruction'], 'rb') as photo:
        await bot.send_photo(
            callback_query.message.chat.id,
            photo=photo,
            caption=(
                "To work, you need an account on *1win*.\n\n" if language == 'en' else
                "–î–ª—è —Ä–∞–±–æ—Ç—ã –≤–∞–º –Ω—É–∂–µ–Ω –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ *1win*.\n\n"
            ),
            parse_mode='Markdown',
            reply_markup=registration_button
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"
@dp.callback_query_handler(lambda c: c.data == 'check_registration')
async def check_registration(callback_query: types.CallbackQuery):
    language = user_languages.get(callback_query.from_user.id, 'en')
    with open("static/id.png", 'rb') as photo:
        await bot.send_photo(
            callback_query.message.chat.id,
            photo=photo,
            caption=(
                "Please enter your **1win account ID** for verification." if language == 'en' else
                "üîç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ **ID –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ 1win** –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            ),
            parse_mode='Markdown'
        )
    users[callback_query.message.chat.id] = 'awaiting_id'

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
